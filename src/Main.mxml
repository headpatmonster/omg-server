<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               creationComplete="onComplete(event)"
               addedToStage="onAddedToStage(event)"
               xmlns:local="components.*"
               backgroundColor="0xedf2f8">
    
    <fx:Style source="/assets/css/global.css" />
    
    <fx:Script><![CDATA[
        import components.Console;
        
        import mx.events.FlexEvent;
        
        private var server: Server;
        private var dataManager: DataManager;
        
        private function onComplete(event: FlexEvent): void
        {
            // TODO Rework hardcoded sections to use CSS instead
            // TODO Policy, VerifyEmail, and ResetCodeEmail should be embedded
            
            txtInput.addEventListener(KeyboardEvent.KEY_DOWN, function (keyboardEvent: KeyboardEvent): void
            {
                if (keyboardEvent.keyCode == Keyboard.ENTER && txtInput.text.length > 0)
                {
                    // Input
                    command(txtInput.text);
                    txtInput.text = "";
                }
            });
            
            // Data manager
            dataManager = DataManager.getInstance();
            
            // Start server
            server = new Server();
            
            // Autosave timer
            var autosaveTimer: Timer = new Timer(10 * 60 * 1000);
            autosaveTimer.addEventListener(TimerEvent.TIMER, onAutosaveTimer);
            autosaveTimer.start();
        }
        
        private function onAddedToStage(event: Event): void
        {
            stage.nativeWindow.addEventListener(Event.CLOSING, onExit);
        }
        
        private function onExit(event: Event): void
        {
            // Save before exiting
            event.preventDefault();
            dataManager.saveDataToFile();
            Console.log("Exiting ...", "config");
            setTimeout(stage.nativeWindow.close, 3000);
        }
        
        private function onAutosaveTimer(event: TimerEvent): void
        {
            Console.log("Autosaving ...", "config");
            dataManager.saveDataToFile();
        }
        
        private function command(str: String): void
        {
            // A Console command
            Console.log(str, "input");
            
            switch (str)
            {
                case "save":
                    dataManager.saveDataToFile();
                    break;
                case "load":
                    dataManager.loadDataFromFile();
                    break;
                case "key":
                    var betaKey: String = dataManager.addBetaKey();
                    Clipboard.generalClipboard.clear();
                    Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, betaKey, false);
                    Console.log("Beta Key copied to clipboard", "key");
                    break;
                case "help":
                    Console.log("help .......... shows this help dialog\n" +
                            "save .......... saves all data to a file\n" +
                            "load .......... shows the help menu\n" +
                            "key ........... generates a new beta key and copies it to the clipboard");
                    break;
                default:
                    Console.log("'" + str + "' isn't a recognized command\nType 'help' for a full list of commands", "alert");
                    break;
            }
        }
        ]]></fx:Script>
    
    <s:VGroup width="100%"
              height="100%"
              gap="2">
        <s:VGroup width="100%"
                  height="100%"
                  padding="4">
            <local:Console id="console"
                           width="100%" />
        </s:VGroup>
        
        <s:TextInput id="txtInput"
                     width="100%"
                     focusAlpha="0"
                     skinClass="skins.CustomTextInputSkin" />
    </s:VGroup>

</s:Application>